<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>MOOC-Python大数据分析（一）</title>
      <link href="2020/10/28/mooc-python-da-shu-ju-fen-xi-yi/"/>
      <url>2020/10/28/mooc-python-da-shu-ju-fen-xi-yi/</url>
      
        <content type="html"><![CDATA[<h1 id="3-3-电影评分数据集的分析1"><a href="#3-3-电影评分数据集的分析1" class="headerlink" title="3.3 电影评分数据集的分析1"></a>3.3 电影评分数据集的分析1</h1><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd unames <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'uid'</span><span class="token punctuation">,</span><span class="token string">'age'</span><span class="token punctuation">,</span><span class="token string">'gender'</span><span class="token punctuation">,</span><span class="token string">'occupation'</span><span class="token punctuation">,</span><span class="token string">'zip'</span><span class="token punctuation">]</span>users<span class="token operator">=</span>  pd<span class="token punctuation">.</span>read_table<span class="token punctuation">(</span><span class="token string">'u.user'</span><span class="token punctuation">,</span>sep<span class="token operator">=</span><span class="token string">'|'</span><span class="token punctuation">,</span>header<span class="token operator">=</span>None<span class="token punctuation">,</span>names<span class="token operator">=</span>unames<span class="token punctuation">)</span>rnames<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'uid'</span><span class="token punctuation">,</span><span class="token string">'mid'</span><span class="token punctuation">,</span><span class="token string">'rating'</span><span class="token punctuation">,</span><span class="token string">'timestamp'</span><span class="token punctuation">]</span>ratings<span class="token operator">=</span>pd<span class="token punctuation">.</span>read_table<span class="token punctuation">(</span><span class="token string">'u.data'</span><span class="token punctuation">,</span>sep<span class="token operator">=</span><span class="token string">'\t'</span><span class="token punctuation">,</span>header<span class="token operator">=</span>None<span class="token punctuation">,</span>names<span class="token operator">=</span>rnames<span class="token punctuation">)</span>frame <span class="token operator">=</span> pd<span class="token punctuation">.</span>merge<span class="token punctuation">(</span>ratings<span class="token punctuation">,</span>users<span class="token punctuation">)</span></code></pre><pre class=" language-python"><code class="language-python">frame<span class="token punctuation">[</span><span class="token string">'rating'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>groupby<span class="token punctuation">(</span>frame<span class="token punctuation">[</span><span class="token string">'gender'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><pre><code>genderF    3.531507M    3.529289Name: rating, dtype: float64</code></pre><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 四舍五入到十位</span>frame<span class="token punctuation">[</span><span class="token string">'rating'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>groupby<span class="token punctuation">(</span>frame<span class="token punctuation">[</span><span class="token string">'age'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>apply<span class="token punctuation">(</span>round<span class="token punctuation">,</span>args<span class="token operator">=</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><pre><code>age10    3.43619520    3.48451330    3.47695040    3.59477550    3.61886360    3.66090870    3.589212Name: rating, dtype: float64</code></pre><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 年龄段结合性别，多个分组注意加[] </span>frame<span class="token punctuation">[</span><span class="token string">'rating'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>groupby<span class="token punctuation">(</span><span class="token punctuation">[</span>frame<span class="token punctuation">[</span><span class="token string">'age'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>apply<span class="token punctuation">(</span>round<span class="token punctuation">,</span>args<span class="token operator">=</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>frame<span class="token punctuation">[</span><span class="token string">'gender'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><pre><code>age  gender10   F         3.327327     M         3.50472620   F         3.440927     M         3.49903530   F         3.479584     M         3.47611140   F         3.701125     M         3.54458750   F         3.533639     M         3.65132860   F         3.600423     M         3.66702370   F         3.239437     M         3.649635Name: rating, dtype: float64</code></pre><pre class=" language-python"><code class="language-python">mnames <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token string">'mid'</span><span class="token punctuation">,</span> <span class="token string">'title'</span><span class="token punctuation">,</span> <span class="token string">'date1'</span><span class="token punctuation">,</span> <span class="token string">'date2'</span><span class="token punctuation">,</span> <span class="token string">'url'</span><span class="token punctuation">,</span> <span class="token string">'unknown'</span><span class="token punctuation">,</span> <span class="token string">'Action'</span><span class="token punctuation">,</span> <span class="token string">'Adventure'</span><span class="token punctuation">,</span>    <span class="token string">'Animation'</span><span class="token punctuation">,</span> <span class="token string">'Children'</span><span class="token punctuation">,</span> <span class="token string">'Comedy'</span><span class="token punctuation">,</span> <span class="token string">'Crime'</span><span class="token punctuation">,</span> <span class="token string">'Documentary'</span><span class="token punctuation">,</span> <span class="token string">'Drama'</span><span class="token punctuation">,</span>    <span class="token string">'Fantasy'</span><span class="token punctuation">,</span> <span class="token string">'Film-Noir'</span><span class="token punctuation">,</span> <span class="token string">'Horror'</span><span class="token punctuation">,</span> <span class="token string">'Musical'</span><span class="token punctuation">,</span> <span class="token string">'Mystery'</span><span class="token punctuation">,</span> <span class="token string">'Romance'</span><span class="token punctuation">,</span>    <span class="token string">'Sci-Fi'</span><span class="token punctuation">,</span> <span class="token string">'Thriller'</span><span class="token punctuation">,</span> <span class="token string">'War'</span><span class="token punctuation">,</span> <span class="token string">'Western'</span><span class="token punctuation">]</span>movies <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_table<span class="token punctuation">(</span><span class="token string">'u.item'</span><span class="token punctuation">,</span>                       sep<span class="token operator">=</span><span class="token string">'|'</span><span class="token punctuation">,</span>                       header<span class="token operator">=</span>None<span class="token punctuation">,</span>                       names<span class="token operator">=</span>mnames<span class="token punctuation">,</span>                      encoding<span class="token operator">=</span><span class="token string">"ISO-8859-1"</span><span class="token punctuation">)</span></code></pre><pre class=" language-python"><code class="language-python">frame <span class="token operator">=</span> pd<span class="token punctuation">.</span>merge<span class="token punctuation">(</span>pd<span class="token punctuation">.</span>merge<span class="token punctuation">(</span>ratings<span class="token punctuation">,</span>users<span class="token punctuation">)</span><span class="token punctuation">,</span>movies<span class="token punctuation">)</span></code></pre><pre class=" language-python"><code class="language-python">frame<span class="token punctuation">[</span><span class="token string">'rating'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>groupby<span class="token punctuation">(</span><span class="token punctuation">[</span>frame<span class="token punctuation">[</span><span class="token string">'gender'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>frame<span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>sort_values<span class="token punctuation">(</span>ascending<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span></code></pre><pre><code>gender  title                        M       Quiet Room, The (1996)           5.0F       Mina Tannenbaum (1994)           5.0M       Star Kid (1997)                  5.0        Prefontaine (1997)               5.0        Great Day in Harlem, A (1994)    5.0                                        ...         Babysitter, The (1995)           1.0        Country Life (1994)              1.0        Babyfever (1994)                 1.0        Modern Affair, A (1995)          1.0F       Vermont Is For Lovers (1992)     1.0Name: rating, Length: 3110, dtype: float64</code></pre><h1 id="3-4-电影评分数据集的分析2"><a href="#3-4-电影评分数据集的分析2" class="headerlink" title="3.4 电影评分数据集的分析2"></a>3.4 电影评分数据集的分析2</h1><blockquote><p>上一节的最后发现某部电影的平均评分为5分，显然是不可能的。可能存在评分人只有一人的情况。我们来看看评分的人数有多少</p></blockquote><h2 id="3-4-1-通过分组来分析数据"><a href="#3-4-1-通过分组来分析数据" class="headerlink" title="3.4.1 通过分组来分析数据"></a>3.4.1 通过分组来分析数据</h2><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 结果不省略，全部显示</span><span class="token comment" spellcheck="true"># pd.set_option('display.max_row',None)</span><span class="token comment" spellcheck="true"># agg([ '','' ])对结果进行两种不同的聚合运算</span>frame1<span class="token operator">=</span>frame<span class="token punctuation">[</span><span class="token string">'rating'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>groupby<span class="token punctuation">(</span><span class="token punctuation">[</span>frame<span class="token punctuation">[</span><span class="token string">'gender'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> frame<span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">]</span>                         <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>agg<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'mean'</span><span class="token punctuation">,</span> <span class="token string">'count'</span>                                 <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>sort_values<span class="token punctuation">(</span>by<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'count'</span><span class="token punctuation">,</span> <span class="token string">'mean'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                                                ascending<span class="token operator">=</span><span class="token punctuation">[</span><span class="token boolean">False</span><span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><pre class=" language-python"><code class="language-python">frame1<span class="token punctuation">[</span>frame1<span class="token punctuation">[</span><span class="token string">'count'</span><span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">.</span>sort_values<span class="token punctuation">(</span>by<span class="token operator">=</span><span class="token string">'mean'</span><span class="token punctuation">,</span> ascending<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th></th>      <th>mean</th>      <th>count</th>    </tr>    <tr>      <th>gender</th>      <th>title</th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th rowspan="11" valign="top">M</th>      <th>Casablanca (1942)</th>      <td>4.473404</td>      <td>188</td>    </tr>    <tr>      <th>Shawshank Redemption, The (1994)</th>      <td>4.410959</td>      <td>219</td>    </tr>    <tr>      <th>Schindler's List (1993)</th>      <td>4.406393</td>      <td>219</td>    </tr>    <tr>      <th>Rear Window (1954)</th>      <td>4.400000</td>      <td>155</td>    </tr>    <tr>      <th>Usual Suspects, The (1995)</th>      <td>4.399061</td>      <td>213</td>    </tr>    <tr>      <th>...</th>      <td>...</td>      <td>...</td>    </tr>    <tr>      <th>Volcano (1997)</th>      <td>2.715152</td>      <td>165</td>    </tr>    <tr>      <th>George of the Jungle (1997)</th>      <td>2.669643</td>      <td>112</td>    </tr>    <tr>      <th>Spawn (1997)</th>      <td>2.669565</td>      <td>115</td>    </tr>    <tr>      <th>Batman Returns (1992)</th>      <td>2.641026</td>      <td>117</td>    </tr>    <tr>      <th>Event Horizon (1997)</th>      <td>2.613861</td>      <td>101</td>    </tr>  </tbody></table><p>258 rows × 2 columns</p></div><h2 id="3-4-2-通过透视图来分析"><a href="#3-4-2-通过透视图来分析" class="headerlink" title="3.4.2 通过透视图来分析"></a>3.4.2 通过透视图来分析</h2><blockquote><p>pivot_table</p></blockquote><pre class=" language-python"><code class="language-python">frame<span class="token punctuation">.</span>pivot_table<span class="token punctuation">(</span><span class="token string">'rating'</span><span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token string">'title'</span><span class="token punctuation">,</span> columns<span class="token operator">=</span><span class="token string">'gender'</span><span class="token punctuation">,</span>                  aggfunc<span class="token operator">=</span><span class="token string">'mean'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>sort_values<span class="token punctuation">(</span>by<span class="token operator">=</span><span class="token string">'F'</span><span class="token punctuation">,</span> ascending<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th>gender</th>      <th>F</th>      <th>M</th>    </tr>    <tr>      <th>title</th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th>Prefontaine (1997)</th>      <td>5.0</td>      <td>5.000000</td>    </tr>    <tr>      <th>Faster Pussycat! Kill! Kill! (1965)</th>      <td>5.0</td>      <td>2.666667</td>    </tr>    <tr>      <th>Telling Lies in America (1997)</th>      <td>5.0</td>      <td>3.083333</td>    </tr>    <tr>      <th>Maya Lin: A Strong Clear Vision (1994)</th>      <td>5.0</td>      <td>4.333333</td>    </tr>    <tr>      <th>Stripes (1981)</th>      <td>5.0</td>      <td>3.500000</td>    </tr>    <tr>      <th>...</th>      <td>...</td>      <td>...</td>    </tr>    <tr>      <th>Wings of Courage (1995)</th>      <td>NaN</td>      <td>4.000000</td>    </tr>    <tr>      <th>Witness (1985)</th>      <td>NaN</td>      <td>4.000000</td>    </tr>    <tr>      <th>Wooden Man's Bride, The (Wu Kui) (1994)</th>      <td>NaN</td>      <td>2.666667</td>    </tr>    <tr>      <th>World of Apu, The (Apur Sansar) (1959)</th>      <td>NaN</td>      <td>4.000000</td>    </tr>    <tr>      <th>You So Crazy (1994)</th>      <td>NaN</td>      <td>3.000000</td>    </tr>  </tbody></table><p>1664 rows × 2 columns</p></div><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 过滤数据</span>ratings_by_title <span class="token operator">=</span> frame<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span><span class="token string">'title'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 此时这个结果只有一列，是个序列类型的变量，因此可以直接使用序列变量的名称作为具体数值列的表示</span>frame<span class="token punctuation">.</span>pivot_table<span class="token punctuation">(</span>    <span class="token string">'rating'</span><span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token string">'title'</span><span class="token punctuation">,</span> columns<span class="token operator">=</span><span class="token string">'gender'</span><span class="token punctuation">,</span>    aggfunc<span class="token operator">=</span><span class="token string">'mean'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>loc<span class="token punctuation">[</span>ratings_by_title<span class="token punctuation">.</span>index<span class="token punctuation">[</span>ratings_by_title <span class="token operator">></span> <span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">]</span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th>gender</th>      <th>F</th>      <th>M</th>    </tr>    <tr>      <th>title</th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th>101 Dalmatians (1996)</th>      <td>3.116279</td>      <td>2.772727</td>    </tr>    <tr>      <th>12 Angry Men (1957)</th>      <td>4.269231</td>      <td>4.363636</td>    </tr>    <tr>      <th>2001: A Space Odyssey (1968)</th>      <td>3.491228</td>      <td>4.103960</td>    </tr>    <tr>      <th>Absolute Power (1997)</th>      <td>3.451613</td>      <td>3.343750</td>    </tr>    <tr>      <th>Abyss, The (1989)</th>      <td>3.814815</td>      <td>3.540323</td>    </tr>    <tr>      <th>...</th>      <td>...</td>      <td>...</td>    </tr>    <tr>      <th>Willy Wonka and the Chocolate Factory (1971)</th>      <td>3.752688</td>      <td>3.583691</td>    </tr>    <tr>      <th>Wizard of Oz, The (1939)</th>      <td>4.159420</td>      <td>4.045198</td>    </tr>    <tr>      <th>Wrong Trousers, The (1993)</th>      <td>4.444444</td>      <td>4.472527</td>    </tr>    <tr>      <th>Young Frankenstein (1974)</th>      <td>4.023810</td>      <td>3.924051</td>    </tr>    <tr>      <th>Young Guns (1988)</th>      <td>3.230769</td>      <td>3.204545</td>    </tr>  </tbody></table><p>334 rows × 2 columns</p></div><pre class=" language-python"><code class="language-python">frame1 <span class="token operator">=</span> frame<span class="token punctuation">.</span>pivot_table<span class="token punctuation">(</span><span class="token string">'rating'</span><span class="token punctuation">,</span>index<span class="token operator">=</span><span class="token string">'title'</span><span class="token punctuation">,</span>columns<span class="token operator">=</span><span class="token string">'gender'</span><span class="token punctuation">,</span>aggfunc<span class="token operator">=</span><span class="token string">'mean'</span><span class="token punctuation">)</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 计算差值方便，但是不够科学。</span>frame1<span class="token punctuation">[</span><span class="token string">'diff'</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token punctuation">(</span>frame1<span class="token punctuation">[</span><span class="token string">'M'</span><span class="token punctuation">]</span><span class="token operator">-</span>frame1<span class="token punctuation">[</span><span class="token string">'F'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>apply<span class="token punctuation">(</span>abs<span class="token punctuation">)</span>frame1<span class="token punctuation">.</span>sort_values<span class="token punctuation">(</span>by<span class="token operator">=</span><span class="token string">'diff'</span><span class="token punctuation">,</span>ascending<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th>gender</th>      <th>F</th>      <th>M</th>      <th>diff</th>    </tr>    <tr>      <th>title</th>      <th></th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th>Delta of Venus (1994)</th>      <td>1.0</td>      <td>5.000000</td>      <td>4.000000</td>    </tr>    <tr>      <th>Two or Three Things I Know About Her (1966)</th>      <td>1.0</td>      <td>4.666667</td>      <td>3.666667</td>    </tr>    <tr>      <th>Paths of Glory (1957)</th>      <td>1.0</td>      <td>4.419355</td>      <td>3.419355</td>    </tr>    <tr>      <th>Magic Hour, The (1998)</th>      <td>1.0</td>      <td>4.250000</td>      <td>3.250000</td>    </tr>    <tr>      <th>Love and Death on Long Island (1997)</th>      <td>4.0</td>      <td>1.000000</td>      <td>3.000000</td>    </tr>    <tr>      <th>...</th>      <td>...</td>      <td>...</td>      <td>...</td>    </tr>    <tr>      <th>Wooden Man's Bride, The (Wu Kui) (1994)</th>      <td>NaN</td>      <td>2.666667</td>      <td>NaN</td>    </tr>    <tr>      <th>World of Apu, The (Apur Sansar) (1959)</th>      <td>NaN</td>      <td>4.000000</td>      <td>NaN</td>    </tr>    <tr>      <th>Yankee Zulu (1994)</th>      <td>1.0</td>      <td>NaN</td>      <td>NaN</td>    </tr>    <tr>      <th>You So Crazy (1994)</th>      <td>NaN</td>      <td>3.000000</td>      <td>NaN</td>    </tr>    <tr>      <th>Á köldum klaka (Cold Fever) (1994)</th>      <td>3.0</td>      <td>NaN</td>      <td>NaN</td>    </tr>  </tbody></table><p>1664 rows × 3 columns</p></div><blockquote><p>借助透视表，可以简单地提取出一列数据来计算。这比分组更加方便</p></blockquote><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 借助标准差更加科学</span>frame<span class="token punctuation">[</span><span class="token string">'rating'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>groupby<span class="token punctuation">(</span><span class="token punctuation">[</span>frame<span class="token punctuation">[</span><span class="token string">'gender'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>frame<span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>std<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>sort_values<span class="token punctuation">(</span>ascending<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span></code></pre><pre><code>gender  title                                   F       Turbo: A Power Rangers Movie (1997)         2.828427M       Mondo (1996)                                2.828427        Tough and Deadly (1995)                     2.828427F       Microcosmos: Le peuple de l&#39;herbe (1996)    2.828427M       For the Moment (1994)                       2.828427                                                      ...           Wife, The (1995)                                 NaN        Window to Paris (1994)                           NaN        Wings of Courage (1995)                          NaN        Witness (1985)                                   NaN        You So Crazy (1994)                              NaNName: rating, Length: 3110, dtype: float64</code></pre>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 数据分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python学习导航</title>
      <link href="2020/10/22/python-xue-xi-dao-hang/"/>
      <url>2020/10/22/python-xue-xi-dao-hang/</url>
      
        <content type="html"><![CDATA[<p><a href="https://github.com/hi-weijun/PythonDataScience-Collections/blob/master/README.md#%E5%85%ADpython%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0">这是作者的GitHub仓库</a></p><p><a href="https://github.com/man824/PythonDataScience-Collections">这是我的GitHub仓库</a></p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>seaborn学习笔记（一）</title>
      <link href="2020/10/22/seaborn-xue-xi-bi-ji-yi/"/>
      <url>2020/10/22/seaborn-xue-xi-bi-ji-yi/</url>
      
        <content type="html"><![CDATA[<h1 id="seaborn功能概述"><a href="#seaborn功能概述" class="headerlink" title="seaborn功能概述"></a>seaborn功能概述</h1><p>seaborn 的功能：</p><ul><li>计算<a href="http://seaborn.pydata.org/examples/faceted_lineplot.html#faceted-lineplot">多变量</a>间<a href="http://seaborn.pydata.org/examples/scatter_bubbles.html#scatter-bubbles">关系</a>的面向数据集接口</li><li>可视化类别变量的<a href="http://seaborn.pydata.org/examples/jitter_stripplot.html#jitter-stripplot">观测</a>与<a href="http://seaborn.pydata.org/examples/pointplot_anova.html#pointplot-anova">统计</a></li><li>可视化<a href="http://seaborn.pydata.org/examples/distplot_options.html#distplot-options">单变量</a>或<a href="http://seaborn.pydata.org/examples/joint_kde.html#joint-kde">多变量</a>分布并与其子数据集<a href="http://seaborn.pydata.org/examples/horizontal_boxplot.html#horizontal-boxplot">比较</a></li><li>控制<a href="http://seaborn.pydata.org/examples/anscombes_quartet.html#anscombes-quartet">线性回归</a>的不同<a href="http://seaborn.pydata.org/examples/logistic_regression.html#logistic-regression">因变量</a>并进行参数估计与作图</li><li>对复杂数据进行易行的整体<a href="http://seaborn.pydata.org/examples/scatterplot_matrix.html#scatterplot-matrix">结构</a>可视化</li><li>对<a href="http://seaborn.pydata.org/examples/faceted_histogram.html#faceted-histogram">多表统计图</a>的制作高度抽象并简化可视化过程</li><li>提供多个内建<a href="http://seaborn.pydata.org/tutorial/aesthetics.html#aesthetics-tutorial">主题</a>渲染 matplotlib 的图像样式</li><li>提供<a href="http://seaborn.pydata.org/tutorial/color_palettes.html#palette-tutorial">调色板</a>工具生动再现数据</li></ul><p>Seaborn 框架旨在以数据可视化为中心来挖掘与理解数据。它提供的面向数据集制图函数主要是对行列索引和数组的操作，包含对整个数据集进行内部的语义映射与统计整合，以此生成富于信息的图表。</p><p>例：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> seaborn <span class="token keyword">as</span> snssns<span class="token punctuation">.</span>set<span class="token punctuation">(</span><span class="token punctuation">)</span>tips <span class="token operator">=</span> sns<span class="token punctuation">.</span>load_dataset<span class="token punctuation">(</span><span class="token string">"tips"</span><span class="token punctuation">)</span>sns<span class="token punctuation">.</span>relplot<span class="token punctuation">(</span>x<span class="token operator">=</span><span class="token string">"total_bill"</span><span class="token punctuation">,</span> y<span class="token operator">=</span><span class="token string">"tip"</span><span class="token punctuation">,</span> col<span class="token operator">=</span><span class="token string">"time"</span><span class="token punctuation">,</span>            hue<span class="token operator">=</span><span class="token string">"smoker"</span><span class="token punctuation">,</span> style<span class="token operator">=</span><span class="token string">"smoker"</span><span class="token punctuation">,</span> size<span class="token operator">=</span><span class="token string">"size"</span><span class="token punctuation">,</span>            data<span class="token operator">=</span>tips<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><img src="https://github.com/man824/blog_source/blob/main/img/seaborn-1.jpg?raw=true"></p><ol><li>装载 seaborn</li></ol><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> seaborn <span class="token keyword">as</span> sns <span class="token comment" spellcheck="true"># 此处，seaborn 实际调用了 matplotlib 作图。</span></code></pre><ol start="2"><li>我们设置并使用 seaborn 默认的主题、尺寸大小以及调色板。</li></ol><pre class=" language-py"><code class="language-py">sns.set()</code></pre><ol start="3"><li>装载数据集</li></ol><pre class=" language-py"><code class="language-py">tips = sns.load_dataset("tips")</code></pre><p>文档中的代码多数会使用 <a href="https://seaborn.apachecn.org/#/generated/seaborn.load_dataset.html?id=seaborn.load_dataset"><code>load_dataset()</code></a> 去取得样例数据集。这些数据集没什么特殊，都是 pandas 的数据结构（dataframes），所以我们也可以使用 <code>pandas.read_csv</code> 或者手动输入创建数据集。<code>tips</code> 数据集提供了一种“整洁”的整合数据的方式，所以如果你使用这种方式来整合自己的数据，使用 seaborn 再好不过了。<a href="https://seaborn.apachecn.org/#/docs/1?id=intro-tidy-data">下面</a>详细解释为什么。</p><ol start="4"><li>我们写一个多子图散点图，分配语义变量</li></ol><pre class=" language-python"><code class="language-python">sns<span class="token punctuation">.</span>relplot<span class="token punctuation">(</span>x<span class="token operator">=</span><span class="token string">"total_bill"</span><span class="token punctuation">,</span> y<span class="token operator">=</span><span class="token string">"tip"</span><span class="token punctuation">,</span> col<span class="token operator">=</span><span class="token string">"time"</span><span class="token punctuation">,</span>            hue<span class="token operator">=</span><span class="token string">"smoker"</span><span class="token punctuation">,</span> style<span class="token operator">=</span><span class="token string">"smoker"</span><span class="token punctuation">,</span> size<span class="token operator">=</span><span class="token string">"size"</span><span class="token punctuation">,</span>            data<span class="token operator">=</span>tips<span class="token punctuation">)</span></code></pre><p>这张图说明了 <code>tips</code> 数据集中五个变量的关系，三个是数值变量，另外两个是类别变量。其中 <code>total_bill</code> 和 <code>tip</code> 这两个数值变量决定了轴上每个点出现的位置，另外一个 <code>size</code> 变量影响着出现点的大小。第一个类别变量 <code>time</code> 将散点图分为两个子图，第二个类别变量 <code>smoker</code> 决定点的形状。</p><p>所有上述内容均由 <a href="https://seaborn.apachecn.org/#/generated/seaborn.relplot.html?id=seaborn.relplot"><code>relplot</code></a> 一次调用生成。注意，在函数调用过程中，我们仅仅使用变量名来划分图像中的不同的语义。如果直接使用 matplotlib ，就必须将变量转换为可视化函数的参数（例如，指定颜色，指定每个类别的制图方式），这在 seaborn 中被自动执行了，以此让使用者将注意力放在他们要解决的问题上。</p><hr><h1 id=""><a href="#" class="headerlink" title=""></a></h1><p>附：<a href="https://seaborn.apachecn.org/#/docs/1">seaborn官方文档（中文）</a></p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> seaborn </tag>
            
            <tag> 绘图 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
